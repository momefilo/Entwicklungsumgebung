mkdir -p mpython/module/mandelbrodt
cd mpython
echo 'include(${CMAKE_CURRENT_LIST_DIR}/mandelbrodt/micropython.cmake)' >> module/micropython.cmake
echo '
MANDELBRODT_MOD_DIR := $(USERMOD_DIR)

# Add all C files to SRC_USERMOD.
SRC_USERMOD += $(MANDELBRODT_MOD_DIR)/mandelbrodt.c

# We can add our module folder to include paths if needed
# This is not actually needed in this example.
CFLAGS_USERMOD += -I$(MANDELBRODT_MOD_DIR)' >> module/mandelbrodt/micropython.mk
echo '
# Create an INTERFACE library for our C module.
add_library(usermod_mandelbrodt INTERFACE)

# Add our source files to the lib
target_sources(usermod_mandelbrodt INTERFACE
    ${CMAKE_CURRENT_LIST_DIR}/mandelbrodt.c
)

# Add the current directory as an include directory.
target_include_directories(usermod_mandelbrodt INTERFACE
    ${CMAKE_CURRENT_LIST_DIR}
)

# Link our INTERFACE library to the usermod target.
target_link_libraries(usermod INTERFACE usermod_mandelbrodt)' >> module/mandelbrodt/micropython.cmake
echo '
// Include MicroPython API.
#include "py/runtime.h"

// Used to get the time in the Timer class example.
#include "py/mphal.h"

// This is the function which will be called from Python as cexample.add_ints(a, b).
static mp_obj_t example_add_ints(mp_obj_t a_obj, mp_obj_t b_obj) {
    // Extract the ints from the micropython input objects.
    int a = mp_obj_get_int(a_obj);
    int b = mp_obj_get_int(b_obj);

    // Calculate the addition and convert to MicroPython object.
    return mp_obj_new_int(a + b);
}
// Define a Python reference to the function above.
static MP_DEFINE_CONST_FUN_OBJ_2(example_add_ints_obj, example_add_ints);

// Define all attributes of the module.
// Table entries are key/value pairs of the attribute name (a string)
// and the MicroPython object reference.
// All identifiers and strings are written as MP_QSTR_xxx and will be
// optimized to word-sized integers by the build system (interned strings).
static const mp_rom_map_elem_t example_module_globals_table[] = {
    { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_cexample) },
    { MP_ROM_QSTR(MP_QSTR_add_ints), MP_ROM_PTR(&example_add_ints_obj) },
};
static MP_DEFINE_CONST_DICT(example_module_globals, example_module_globals_table);

// Define module object.
const mp_obj_module_t example_user_cmodule = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t *)&example_module_globals,
};

// Register the module to make it available in Python.
MP_REGISTER_MODULE(MP_QSTR_mandelbrodt, example_user_cmodule);' >> module/mandelbrodt/mandelbrodt.c

git clone https://github.com/micropython/micropython.git --branch master
git clone https://github.com/micropython/micropython-lib.git --branch master
cd micropython
cp -r ports/rp2 ports/rp2_momefilo
# in ports/rp2_momefilo/mpconfigport.h ändere #define MICROPY_HW_ENABLE_UART_REPL 1
# in ports/rp2_momefilo/modules könen eine main.py(Autostart, nicht ueberschreibbar) und andere module mit eingebunden werden
make -j4 -C ports/rp2_momefilo BOARD=RPI_PICO_W submodules
make -j4 -C mpy-cross
cd ports/rp2_momefilo
make -j4 USER_C_MODULES=../../../module/micropython.cmake BOARD=RPI_PICO_W
cd build-RPI_PICO_W
#zum rekompilieren ändere mandelbrodt.c
cd ports/rp2_momefilo
make BOARD=RPI_PICO_W clean
make -j4 USER_C_MODULES=../../../module/micropython.cmake BOARD=RPI_PICO_W

#transfer firmaware
~/pico/transfer.sh firmware.elf

# start python REPL
ssh pi0 -t "minicom -b 115200 -o -D /dev/serial0"
import mandelbrodt
print(mandelbrodt.add_ints(1, 3))

# auf der wlan-debug-bridge
sudo apt update
sudo apt install python3-pip
sudo mv /usr/lib/python3.11/EXTERNALLY-MANAGED /usr/lib/python3.11/EXTERNALLY-MANAGED.orig
pip install rshell
pip install ampy
rshell -p /dev/serial0 cp /home/momefilo/$1 /pyboard/
ampy --port /dev/serial0 put $1

